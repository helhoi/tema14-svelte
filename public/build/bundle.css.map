{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Climb.svelte",
    "../../Jump.svelte",
    "../../Man.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport Climb from './components/Climb.svelte'\nimport Jump from './components/Jump.svelte'\nimport Fall from './components/Fall.svelte'\nimport Swim from './components/Swim.svelte'\nimport { scrollStop } from './helpers/helpers.js'\n\n//add scenes here\nlet scenes = ['climb', 'jump', 'fall', 'swim']\n\n//current scene is..\nlet sceneIndex = 0\n\n//window properties\nlet y, x, h, w\n\n//switch scenes by typing a number 0, 1, 2, 3 etc..\nconst handleKeydown = e => {\n\tif(!isNaN(e.key) && e.key < scenes.length) changeScene(e.key)\n}\n\n//scroll handlers - see the status window \nlet isScrolling = false\nwindow.addEventListener('scroll', () => isScrolling = true)\n$: scrollStop( () => isScrolling = false )\n\n//change scene function - is called either on keypress or by the modules, whenever they dispatch 'done'\nconst changeScene = nr => {\n\t//reset scroll\n\ty = 0\n\twindow.scrollTo(0,0)\n\tif(!isNaN(nr)){sceneIndex=nr;return}\n\tsceneIndex = (sceneIndex == scenes.length ? 0 : sceneIndex + 1)\n} \n\n</script>\n\n<!-- in Svelte you can get all sorts of bindings on the window - if needed save one in a variable and pass it down as a prop to the subcomponents -->\n<svelte:window \n\ton:keydown={handleKeydown} \n\tbind:scrollX={x} \n\tbind:scrollY={y} \n\tbind:innerHeight={h} \n\tbind:innerWidth={w} />\n\n<main>\n\t<!-- display showing scroll, scene etc -->\n\t<div class='status'>\n\t\t<span>y pos</span><span>{Math.round(y)}</span>\n\t\t<span>scrolling</span><span>{isScrolling}</span>\n\t\t<span>scene</span><span>{ scenes[sceneIndex] }</span>\n\t</div>\n\n\t<!-- \n\tdepending on the current sceneIndex, show components \n\tnote the on:done={changeScene} on each component - check Climb.svelte to see how it works \n\t-->\n\t{#if sceneIndex == 0}\n\t\t<Climb scroll={y} \ton:done={changeScene} isScrolling={isScrolling}/>\n\t{:else if sceneIndex == 1}\n\t\t<Jump scroll={y} \ton:done={changeScene} width={w}/>\n\t{:else if sceneIndex == 2}\n\t\t<Fall scroll = {y} \ton:done={changeScene}/>\n\t{:else if sceneIndex == 3}\n\t\t<Swim scroll={y} \ton:done={changeScene}/>\n\t{/if}\n\n</main>\n\n<style>\n\t@import url('https://fonts.googleapis.com/css?family=Open+Sans&display=swap');\n    .status{\n        position:fixed;\n        left:2rem;\n        top:2rem;\n        background:rgba(0,0,0,.5);\n\t\tborder-radius:1rem;\n        display: grid;\n\t\tgrid-template-columns:1fr 1fr;\n\t\tgap:0 1rem;\n        padding:1rem;\n        color:white;\n    }\n\tmain{\n\t\tmin-height:10000px;\n\t\toverflow:scroll;\n\t}\n\t:global(section){\n\t\tposition:fixed;\n        top:0;\n        left:0;\n\t\twidth:100vw;\n\t\theight:100vh;\n\t\tdisplay:grid;\n\t\tplace-items:center;\n\t\tcolor:gray;\n\t\tfont-weight:300;\n\t}\n\n\t:global(html, body){\n\t\tfont-family:'Open Sans';\n\t\tmargin:0;\n\t\tpadding:0;\t\t\n\t}\n\t:global(*){\n\t\tbox-sizing:border-box;\n\t}\n</style>",
    "<script>\n    // when the scene is done we will 'dispatch' the event 'done' to App.svelte, therefore we import the event dispatcher\n    import { createEventDispatcher } from 'svelte'\n    const dispatch = createEventDispatcher()\n\n    //props from App.js\n    export let scroll, isScrolling\n\n    //local vars bound to the two image elements\n    let ladder, diver\n\n    // a reactive var: src always checks whether isScrolling is true or false, and can thus be used to trigger shift between the images \n    $: src = isScrolling ? './img/climber.gif' : './img/climber_still.png'\n\n    // an anonymous reactive variable checks the position of the two images and dispatches 'done', when the climber has reached a certain distance to the top of the latter (change 150 to something else to tweak)\n    $: {\n        if(ladder){\n            ladder.style.transform = `translateY(${scroll/12}px)`\n            if(scroll >= 9274) {\n                console.log('stige sin topp er nå: ', ladder.getBoundingClientRect().top)\n                console.log('ready to jump..')\n                dispatch('done')\n            }\n        }\n    }\n\n</script>\n\n<section>\n    <h3>scroll to climb..</h3>\n    <img bind:this={ladder} src='./img/stige.png' class='stige' alt='title' />\n</section>\n\n\n\n<style>\n    h3{\n        position:absolute;\n        bottom:4rem;\n    }\n    .stige{\n        width:600px;\n        position:absolute;\n    }\n    .diver{\n        width:150px;\n    }\n</style>",
    "<script>\n    import { createEventDispatcher } from 'svelte'      \n    import Man from './Man.svelte'\n\n\n    const dispatch = createEventDispatcher()\n\n    export let scroll, width\n\n    let man, manIsDangerouslyCloseToTheEnd = false\n\n    let ladder\n\n</script>\n\n<section>\n    <h3>scroll to jump →</h3>\n\n    {#if scroll <= 1000}\n        <Man src='./img/1.png' moveUp='100'/>\n        {:else if scroll >= 1501 && scroll <= 2000 }\n        <Man src='./img/2.png' />\n    {:else if scroll >= 2001 && scroll <= 2500}\n        <Man src='./img/3.png' moveForward='-100' />\n    {:else if scroll >= 2501 && scroll <=2800}\n        <Man src='./img/4.png' moveForward='-130' />\n    {:else if scroll >= 2001 && scroll <=3200}\n        <Man src='./img/5.png' moveForward='-130' />\n    {:else if scroll >= 3501 && scroll <=3800}\n        <Man src='./img/6.png' moveForward='-230' />\n    {:else if scroll >= 4000 && scroll <=4500}\n        <Man src='./img/7.png' class='seven' moveUp='200' moveForward='-200'  />\n    {:else}\n        <Man src='./img/8.png' moveForward='-130' />\n    \n    {/if}\n    <img bind:this={ladder} src='./img/stige.png' class='stige' alt='title' />\n\n</section>\n\n\n\n<style>\n    h3{\n        position:absolute;\n        bottom:4rem;\n    }\n    \n    h4{\n        position:absolute;\n    }\n    .stige{\n        width:600px;\n        top:200px;\n        position:absolute;\n    }\n    .seven {\n        bottom: 700px;\n    }\n    \n\n</style>",
    "<script>\n    import { fade } from 'svelte/transition' \n    export let src, moveUp, moveForward\n    let man\n\n    $: {        \n        if(moveUp && man){\n            man.style.transform = `translateY(${moveUp}px)`\n        }\n        if(moveForward && man) {\n            man.style.transform = `translateX(${moveForward}px)`\n        }\n    }\n\n</script>\n\n<div in:fade out:fade>\n    <img bind:this={man} src='{src}' class='man' alt='manny' />\n</div>\n\n<style>\n    .man{\n        width:300px;\n        top:123px;\n        position:absolute;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "AAsEC,QAAQ,IAAI,gEAAgE,CAAC,CAAC,AAC3E,qBAAO,CAAC,AACJ,SAAS,KAAK,CACd,KAAK,IAAI,CACT,IAAI,IAAI,CACR,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAC/B,cAAc,IAAI,CACZ,OAAO,CAAE,IAAI,CACnB,sBAAsB,GAAG,CAAC,GAAG,CAC7B,IAAI,CAAC,CAAC,IAAI,CACJ,QAAQ,IAAI,CACZ,MAAM,KAAK,AACf,CAAC,AACJ,kBAAI,CAAC,AACJ,WAAW,OAAO,CAClB,SAAS,MAAM,AAChB,CAAC,AACO,OAAO,AAAC,CAAC,AAChB,SAAS,KAAK,CACR,IAAI,CAAC,CACL,KAAK,CAAC,CACZ,MAAM,KAAK,CACX,OAAO,KAAK,CACZ,QAAQ,IAAI,CACZ,YAAY,MAAM,CAClB,MAAM,IAAI,CACV,YAAY,GAAG,AAChB,CAAC,AAEO,UAAU,AAAC,CAAC,AACnB,YAAY,WAAW,CACvB,OAAO,CAAC,CACR,QAAQ,CAAC,AACV,CAAC,AACO,CAAC,AAAC,CAAC,AACV,WAAW,UAAU,AACtB,CAAC;ACtEE,iBAAE,CAAC,AACC,SAAS,QAAQ,CACjB,OAAO,IAAI,AACf,CAAC,AACD,qBAAM,CAAC,AACH,MAAM,KAAK,CACX,SAAS,QAAQ,AACrB,CAAC;ACAD,iBAAE,CAAC,AACC,SAAS,QAAQ,CACjB,OAAO,IAAI,AACf,CAAC,AAKD,qBAAM,CAAC,AACH,MAAM,KAAK,CACX,IAAI,KAAK,CACT,SAAS,QAAQ,AACrB,CAAC;AClCD,mBAAI,CAAC,AACD,MAAM,KAAK,CACX,IAAI,KAAK,CACT,SAAS,QAAQ,AACrB,CAAC"
}